<?xml version="1.0"?>
<robot name="camera_mount" xmlns:xacro="http://wiki.ros.org/xacro">

  <!-- Camera mount macro -->
  <xacro:macro name="camera_mount" params="prefix parent *origin">
    
    <!-- Camera mount base -->
    <link name="${prefix}camera_mount_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.030 0.025 0.015"/>
        </geometry>
        <material name="camera_mount_material">
          <color rgba="0.3 0.3 0.3 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.030 0.025 0.015"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.050"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
      </inertial>
    </link>

    <!-- Camera mount joint -->
    <joint name="${prefix}camera_mount_joint" type="fixed">
      <parent link="${parent}"/>
      <child link="${prefix}camera_mount_link"/>
      <xacro:insert_block name="origin"/>
    </joint>

    <!-- Camera link (RealSense D435i simulation) -->
    <link name="${prefix}camera_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.090 0.025 0.025"/>
        </geometry>
        <material name="camera_material">
          <color rgba="0.1 0.1 0.1 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="0.090 0.025 0.025"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="0.072"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
      </inertial>
    </link>

    <!-- Camera joint -->
    <joint name="${prefix}camera_joint" type="fixed">
      <parent link="${prefix}camera_mount_link"/>
      <child link="${prefix}camera_link"/>
      <origin xyz="0.015 0 0.020" rpy="0 0 0"/>
    </joint>

    <!-- Camera optical frame -->
    <link name="${prefix}camera_optical_frame"/>
    <joint name="${prefix}camera_optical_joint" type="fixed">
      <parent link="${prefix}camera_link"/>
      <child link="${prefix}camera_optical_frame"/>
      <origin xyz="0 0 0" rpy="-1.5708 0 -1.5708"/>
    </joint>

    <!-- Camera color frame -->
    <link name="${prefix}camera_color_frame"/>
    <joint name="${prefix}camera_color_joint" type="fixed">
      <parent link="${prefix}camera_link"/>
      <child link="${prefix}camera_color_frame"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!-- Camera depth frame -->
    <link name="${prefix}camera_depth_frame"/>
    <joint name="${prefix}camera_depth_joint" type="fixed">
      <parent link="${prefix}camera_link"/>
      <child link="${prefix}camera_depth_frame"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!-- Gazebo camera plugin -->
    <gazebo reference="${prefix}camera_link">
      <sensor type="camera" name="gripper_camera">
        <update_rate>30.0</update_rate>
        <camera name="head">
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>gripper_camera</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${prefix}camera_optical_frame</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
      <material>Gazebo/Black</material>
    </gazebo>

    <!-- Gazebo depth camera plugin (for depth sensing) -->
    <gazebo reference="${prefix}camera_link">
      <sensor type="depth" name="gripper_depth_camera">
        <update_rate>20</update_rate>
        <camera>
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>3</far>
          </clip>
        </camera>
        <plugin name="gripper_depth_camera_controller" filename="libgazebo_ros_openni_kinect.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <updateRate>1.0</updateRate>
          <cameraName>gripper_depth_camera</cameraName>
          <imageTopicName>/gripper_camera/depth/image_raw</imageTopicName>
          <cameraInfoTopicName>/gripper_camera/depth/camera_info</cameraInfoTopicName>
          <depthImageTopicName>/gripper_camera/depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>/gripper_camera/depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>/gripper_camera/depth/points</pointCloudTopicName>
          <frameName>${prefix}camera_optical_frame</frameName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

  </xacro:macro>

</robot>